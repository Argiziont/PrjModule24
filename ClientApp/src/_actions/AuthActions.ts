/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.2.0 (NJsonSchema v10.3.4.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export class AuthenticateClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : <any>window;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:6001";
  }

  login(model: LoginModel): Promise<UserResponse> {
      let url_ = this.baseUrl + "/User/Login";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(model);

      let options_ = <RequestInit>{
          body: content_,
          method: "POST",
          headers: {
              "Content-Type": "application/json",
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processLogin(_response);
      });
  }

  protected processLogin(response: Response): Promise<UserResponse> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = UserResponse.fromJS(resultData200);
          return result200;
          });
      } else if (status === 401) {
          return response.text().then((_responseText) => {
          let result401: any = null;
          let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException("A server side error occurred.", status, _responseText, _headers, result401);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }

  register(model: RegisterModel): Promise<void> {
      let url_ = this.baseUrl + "/User/Register";
      url_ = url_.replace(/[?&]$/, "");

      const content_ = JSON.stringify(model);

      let options_ = <RequestInit>{
          body: content_,
          method: "POST",
          headers: {
              "Content-Type": "application/json",
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processRegister(_response);
      });
  }

  protected processRegister(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status === 500) {
          return response.text().then((_responseText) => {
          let result500: any = null;
          let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result500 = ApiResponse.fromJS(resultData500);
          return throwException("A server side error occurred.", status, _responseText, _headers, result500);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }

  tryLogin(): Promise<void> {
      let url_ = this.baseUrl + "/User/TryLogin";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processTryLogin(_response);
      });
  }

  protected processTryLogin(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status === 401) {
          return response.text().then((_responseText) => {
          let result401: any = null;
          let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result401 = ProblemDetails.fromJS(resultData401);
          return throwException("A server side error occurred.", status, _responseText, _headers, result401);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }

  logout(): Promise<FileResponse> {
      let url_ = this.baseUrl + "/User/Logout";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
              "Accept": "application/octet-stream"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processLogout(_response);
      });
  }

  protected processLogout(response: Response): Promise<FileResponse> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200 || status === 206) {
          const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
          const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
          const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
          return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
      } else if (status !== 200 && status !== 204) {
          return response.text().then((_responseText) => {
          return throwException("An unexpected server error occurred.", status, _responseText, _headers);
          });
      }
      return Promise.resolve<FileResponse>(<any>null);
  }
}

export class RolesClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
      this.http = http ? http : <any>window;
      this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:6001";
  }

  create(name: string | null | undefined): Promise<void> {
      let url_ = this.baseUrl + "/Roles/Create?";
      if (name !== undefined && name !== null)
          url_ += "name=" + encodeURIComponent("" + name) + "&";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "POST",
          headers: {
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processCreate(_response);
      });
  }

  protected processCreate(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status === 500) {
          return response.text().then((_responseText) => {
          let result500: any = null;
          let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result500 = ApiResponse.fromJS(resultData500);
          return throwException("A server side error occurred.", status, _responseText, _headers, result500);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }

  deleteWithId(id: string | null | undefined): Promise<void> {
      let url_ = this.baseUrl + "/Roles/DeleteWithId?";
      if (id !== undefined && id !== null)
          url_ += "id=" + encodeURIComponent("" + id) + "&";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "POST",
          headers: {
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processDeleteWithId(_response);
      });
  }

  protected processDeleteWithId(response: Response): Promise<void> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          return;
          });
      } else if (status === 500) {
          return response.text().then((_responseText) => {
          let result500: any = null;
          let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          result500 = ApiResponse.fromJS(resultData500);
          return throwException("A server side error occurred.", status, _responseText, _headers, result500);
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }

  getRoles(): Promise<IdentityRole[]> {
      let url_ = this.baseUrl + "/Roles/GetRoles";
      url_ = url_.replace(/[?&]$/, "");

      let options_ = <RequestInit>{
          method: "GET",
          headers: {
              "Accept": "application/json"
          }
      };

      return this.http.fetch(url_, options_).then((_response: Response) => {
          return this.processGetRoles(_response);
      });
  }

  protected processGetRoles(response: Response): Promise<IdentityRole[]> {
      const status = response.status;
      let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
      if (status === 200) {
          return response.text().then((_responseText) => {
          let result200: any = null;
          let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          if (Array.isArray(resultData200)) {
              result200 = [] as any;
              for (let item of resultData200)
                  result200!.push(IdentityRole.fromJS(item));
          }
          return result200;
          });
      } else {
          return response.text().then((_responseText) => {
          let resultdefault: any = null;
          let resultDatadefault = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
          resultdefault = ProblemDetails.fromJS(resultDatadefault);
          return throwException("A server side error occurred.", status, _responseText, _headers, resultdefault);
          });
      }
  }
}

export class UserResponse implements IUserResponse {
  token?: string | undefined;
  expirationDate?: Date;

  constructor(data?: IUserResponse) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.token = _data["token"];
          this.expirationDate = _data["expirationDate"] ? new Date(_data["expirationDate"].toString()) : <any>undefined;
      }
  }

  static fromJS(data: any): UserResponse {
      data = typeof data === 'object' ? data : {};
      let result = new UserResponse();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["token"] = this.token;
      data["expirationDate"] = this.expirationDate ? this.expirationDate.toISOString() : <any>undefined;
      return data; 
  }
}

export interface IUserResponse {
  token?: string | undefined;
  expirationDate?: Date;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; } | undefined;

  constructor(data?: IProblemDetails) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.type = _data["type"];
          this.title = _data["title"];
          this.status = _data["status"];
          this.detail = _data["detail"];
          this.instance = _data["instance"];
          if (_data["extensions"]) {
              this.extensions = {} as any;
              for (let key in _data["extensions"]) {
                  if (_data["extensions"].hasOwnProperty(key))
                      this.extensions![key] = _data["extensions"][key];
              }
          }
      }
  }

  static fromJS(data: any): ProblemDetails {
      data = typeof data === 'object' ? data : {};
      let result = new ProblemDetails();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["type"] = this.type;
      data["title"] = this.title;
      data["status"] = this.status;
      data["detail"] = this.detail;
      data["instance"] = this.instance;
      if (this.extensions) {
          data["extensions"] = {};
          for (let key in this.extensions) {
              if (this.extensions.hasOwnProperty(key))
                  data["extensions"][key] = this.extensions[key];
          }
      }
      return data; 
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;
  extensions?: { [key: string]: any; } | undefined;
}

export class LoginModel implements ILoginModel {
  username!: string;
  password!: string;

  constructor(data?: ILoginModel) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.username = _data["username"];
          this.password = _data["password"];
      }
  }

  static fromJS(data: any): LoginModel {
      data = typeof data === 'object' ? data : {};
      let result = new LoginModel();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["username"] = this.username;
      data["password"] = this.password;
      return data; 
  }
}

export interface ILoginModel {
  username: string;
  password: string;
}

export class ApiResponse implements IApiResponse {
  status?: string | undefined;
  message?: string | undefined;

  constructor(data?: IApiResponse) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.status = _data["status"];
          this.message = _data["message"];
      }
  }

  static fromJS(data: any): ApiResponse {
      data = typeof data === 'object' ? data : {};
      let result = new ApiResponse();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["status"] = this.status;
      data["message"] = this.message;
      return data; 
  }
}

export interface IApiResponse {
  status?: string | undefined;
  message?: string | undefined;
}

export class RegisterModel implements IRegisterModel {
  username!: string;
  email!: string;
  password!: string;

  constructor(data?: IRegisterModel) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.username = _data["username"];
          this.email = _data["email"];
          this.password = _data["password"];
      }
  }

  static fromJS(data: any): RegisterModel {
      data = typeof data === 'object' ? data : {};
      let result = new RegisterModel();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["username"] = this.username;
      data["email"] = this.email;
      data["password"] = this.password;
      return data; 
  }
}

export interface IRegisterModel {
  username: string;
  email: string;
  password: string;
}

export class IdentityRoleOfString implements IIdentityRoleOfString {
  id?: string | undefined;
  name?: string | undefined;
  normalizedName?: string | undefined;
  concurrencyStamp?: string | undefined;

  constructor(data?: IIdentityRoleOfString) {
      if (data) {
          for (var property in data) {
              if (data.hasOwnProperty(property))
                  (<any>this)[property] = (<any>data)[property];
          }
      }
  }

  init(_data?: any) {
      if (_data) {
          this.id = _data["id"];
          this.name = _data["name"];
          this.normalizedName = _data["normalizedName"];
          this.concurrencyStamp = _data["concurrencyStamp"];
      }
  }

  static fromJS(data: any): IdentityRoleOfString {
      data = typeof data === 'object' ? data : {};
      let result = new IdentityRoleOfString();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      data["id"] = this.id;
      data["name"] = this.name;
      data["normalizedName"] = this.normalizedName;
      data["concurrencyStamp"] = this.concurrencyStamp;
      return data; 
  }
}

export interface IIdentityRoleOfString {
  id?: string | undefined;
  name?: string | undefined;
  normalizedName?: string | undefined;
  concurrencyStamp?: string | undefined;
}

export class IdentityRole extends IdentityRoleOfString implements IIdentityRole {

  constructor(data?: IIdentityRole) {
      super(data);
  }

  init(_data?: any) {
      super.init(_data);
  }

  static fromJS(data: any): IdentityRole {
      data = typeof data === 'object' ? data : {};
      let result = new IdentityRole();
      result.init(data);
      return result;
  }

  toJSON(data?: any) {
      data = typeof data === 'object' ? data : {};
      super.toJSON(data);
      return data; 
  }
}

export interface IIdentityRole extends IIdentityRoleOfString {
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
      super();

      this.message = message;
      this.status = status;
      this.response = response;
      this.headers = headers;
      this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
      return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  throw new ApiException(message, status, response, headers, result);
}